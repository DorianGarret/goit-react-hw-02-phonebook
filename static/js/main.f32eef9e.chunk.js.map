{"version":3,"sources":["components/Form/Form.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","components/App/App.jsx","index.js"],"names":["Form","state","name","number","nameId","nanoid","numberId","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","this","htmlFor","type","pattern","title","required","id","onChange","Component","Filter","inputSearchId","ContactList","getContact","map","App","contacts","initialContacts","filter","setContact","data","normalizedName","toLowerCase","isContact","find","contact","includes","alert","checkContact","changeFilter","normalizedFilter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f32eef9e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { nanoid } from 'nanoid';\n\nexport default class Form extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  nameId = nanoid();\n  numberId = nanoid();\n\n  handleChange = event => {\n    const { name, value } = event.currentTarget;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    this.props.onSubmit(this.state);\n    this.reset();\n  };\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    const { name, number } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label htmlFor={this.nameId}>Name</label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          id={this.nameId}\n          value={name}\n          onChange={this.handleChange}\n        />\n\n        <label htmlFor={this.numberId}>Number</label>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          id={this.numberId}\n          value={number}\n          onChange={this.handleChange}\n        />\n\n        <button type=\"submit\">Add contact</button>\n      </form>\n    );\n  }\n}\n","import { Fragment } from 'react';\nimport { nanoid } from 'nanoid';\n\nexport default function Filter({ value, onChange, ...restProps }) {\n  const inputSearchId = nanoid();\n  return (\n    <Fragment>\n      <label htmlFor={inputSearchId}>Find contacts by name</label>\n      <input\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        value={value}\n        id={inputSearchId}\n        onChange={onChange}\n      />\n    </Fragment>\n  );\n}\n","export default function ContactList({ getContact }) {\n  return (\n    <ul>\n      {getContact.map(({ id, name, number }) => (\n        <li key={id}>\n          <p>{`${name}: ${number}`}</p>\n        </li>\n      ))}\n    </ul>\n  );\n}\n","import React, { Component, Fragment } from 'react';\nimport { nanoid } from 'nanoid';\nimport initialContacts from 'data/contacts.json';\nimport Form from 'components/Form';\nimport Filter from 'components/Filter';\nimport ContactList from 'components/ContactList/ContactList';\n\nexport default class App extends Component {\n  state = {\n    contacts: initialContacts,\n    filter: '',\n  };\n\n  setContact = data => {\n    const { contacts } = this.state;\n    const normalizedName = data.name.toLowerCase();\n\n    const isContact = contacts.find(contact => {\n      return contact.name.toLowerCase().includes(normalizedName);\n    });\n\n    if (isContact) {\n      return alert(`${data.name} is already in contacts`);\n    }\n\n    const contact = { id: nanoid(), ...data };\n    this.setState(({ contacts }) => ({\n      contacts: [contact, ...contacts],\n    }));\n  };\n\n  checkContact = contacts => {};\n\n  changeFilter = event => {\n    this.setState({ filter: event.currentTarget.value });\n  };\n\n  getContact = () => {\n    const { filter, contacts } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n  render() {\n    const { filter } = this.state;\n    const { setContact, changeFilter, getContact } = this;\n\n    return (\n      <Fragment>\n        <h1>Phonebook</h1>\n        <Form onSubmit={setContact} />\n        <h2>Contacts</h2>\n        <Filter value={filter} onChange={changeFilter} />\n        <ContactList getContact={getContact()} />\n      </Fragment>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}